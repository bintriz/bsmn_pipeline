bsmn-pipeline implements various cluster jobs, arranged for genome alignment, variant calling and variant filtering.

Getting the bsmn pipeline
=========================

    git clone https://github.com/bsmn/bsmn-pipeline.git

Creating an environment from YAML file
======================================

This step depends on the conda which is a tool for installling and managing dependencies.
You need to install conda first (https://docs.conda.io/en/latest/miniconda.html).

To create a new conda environment from the given environment.yml file, run:

    conda env create -f /path/to/environment.yml 

By default, the name of environment will be 'bp'. you can change it by adding a '-n <name>' option to the command above.

Installing ucsc packages
========================

ucsc-* packages were excluded from the environment file because of conflicting with root.
Here you need to install those packages by running commands as follows:

    conda install -c bioconda -n bp ucsc-fetchchromsizes ucsc-bigwigaverageoverbed ucsc-wigtobigwig ucsc-liftover

Building CNVnator
=================

To build and install CNVnator, activate the 'bp' environment and type the following commands:

    conda activate bp # Make sure you've activated the environment you created.
    cd $CONDA_PREFIX # Within the environment directory
    git clone https://github.com/yjjang/CNVnator.git
    cd CNVnator
    wget https://github.com/samtools/samtools/releases/download/1.10/samtools-1.10.tar.bz2
    tar xjf samtools-1.10.tar.bz2 && mv samtools-1.10 samtools
    cd samtools
    ./configure && make -j 8
    cd ..
    make YEPPPLIBDIR=../lib YEPPPINCLUDEDIR=../include/yeppp
    cd $CONDA_PREFIX/bin && ln -s ../CNVnator/cnvnator

Installing MosaicForecast
=========================

For the reproducibility and consistency, it is recommended to checkout the specific revision as below.

    cd $CONDA_PREFIX # Within the environment directory (optional, any directory would be fine)
    git clone https://github.com/parklab/MosaicForecast.git
    cd MosaicForecast
    git checkout 63d8e60

Resources
=========

google-cloud-sdk and crcmod
---------------------------

    conda activate bp # Make sure you've activated the environment you created.
    pip3 install --no-cache-dir -U crcmod
    gsutils version -l # You should see the 'compiled crcmod: True'
    conda deactivate

Downloading
-----------

    /path/to/pipeline/download_resources.sh

Configuring the pipeline
========================

    /path/to/pipeline/config.{b37,h19,h38}.ini

Running the pipeline
====================

sample_list.txt file format
---------------------------

If you have fastq files,

    #sample_id    file_name                       location (full path)
    FVLT          FVLT_S15_L003_R1_001.fastq.gz   /path/to/FVLT_S15_L003_R1_001.fastq.gz
    FVLT          FVLT_S15_L003_R2_001.fastq.gz   /path/to/FVLT_S15_L003_R2_001.fastq.gz

If you have cram (or bam) files,

    #sample_id    file_name       location (full path)
    AN02255       AN02255.cram    /path/to/AN02255.cram

Align raw reads (fastq) to genome (b37 (default), hg19 or hg38)
---------------------------------------------------------------

Align fastq files to GRCh37 reference genome to make a aligned cram, an ummapped bam and flagstats.

    python3 /path/to/pipeline/jobs/run_genome_mapping.py -q 4-day --sample-list /path/to/sample_list.txt 

    -q, --queue       specify the SGE queue for jobs to be submitted.
    -n, --conda-env   specify the name of conda environment (default: bp)
    -t, --target-seq  enable targeted sequencing mode to skip mark duplication.
    -f, --align-fmt   specify alignment format (cram|bam). Default is cram.
    -r, --reference   specify reference genome (b37|hg19|hg38). Default is b37 (GRCh37).
    --sample-list     specify sample_list.txt file
    -p, --run-gatk-hc once alignment complete, run the variant calling with the given ploidy.
    --run-filters     once variant calling complete, run the varinat filtering as well.

Running the GATK HaplotypeCaller
--------------------------------

Given the BAM file, run the GATK HaplotypeCaller with ploidy 2, 12 and 50.

    python3 /path/to/pipeline/jobs/run_variant_calling.py -q 4-day -p 2 12 50 --sample-list /path/to/sample_list.txt 

    -p, --run-gatk-hc  specify ploidy options used by GATK.
    --run-filters      once variant calling complete, run the varinat filtering as well.

Variant filtering
-----------------

Given the BAM and VCF files, run the variant filtering.

    python3 /path/to/pipeline/jobs/run_variant_calling.py -q 4-day -p 50 --sample-list /path/to/sample_list.txt 

    --skip-cnvnator            skip the CNV filering
    -m, --multiple-alignments  enable multiple cram (or bam) files mode for combined calling 

