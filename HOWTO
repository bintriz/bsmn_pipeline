bsmn-pipeline implements various cluster jobs, arranged for genome alignment, variant calling and variant filtering.

Getting the bsmn pipeline
=========================

    git clone https://github.com/bsmn/bsmn-pipeline.git

Creating a conda environment from YAML file
===========================================

This step depends on the conda which is a tool for installling and managing dependencies.
You need to install conda first (https://docs.conda.io/en/latest/miniconda.html).

To create a new conda environment from the given environment.yml file, run:

    conda env create -f /path/to/environment.yml 

By default, the name of environment will be 'bp'. you can change it by adding a '-n <name>' option to the command above.

Installing ucsc packages
========================

To install ucsc-* packages, run:

    conda install -n bp -c bioconda ucsc-fetchchromsizes ucsc-bigwigaverageoverbed ucsc-wigtobigwig ucsc-liftover

Downloading GATK3
=================

We use GATK3 for the indel realignment through the alignment pipeline.
Due to license restrictions, you need to download a copy of GATK3 from the Broad Institute.

    wget https://storage.googleapis.com/gatk-software/package-archive/gatk/GenomeAnalysisTK-3.8-1-0-gf15c1c3ef.tar.bz2 \
         -O GenomeAnalysisTK-3.8.tar.bz2

Then you can register into your conda environment.

    conda activate bp # Make sure you've activated the environment you created.
    gatk3-register /path/to/GenomeAnalysisTK-3.8.tar.bz2

GATK4, which is used in the variant calling pipeline, doesn't have a such restriction.

Installing MosaicForecast
=========================

    cd $CONDA_PREFIX # Optional, any directory would be ok if you set it properly in config.ini
    git clone https://github.com/parklab/MosaicForecast.git
    cd MosaicForecast
    git checkout 63d8e60 # Optional, this is the revision we used in our analyses.

Downloading resources
=====================

    cd /path/to/pipeline
    ./download_resources.sh

Configuring the pipeline
========================

If you changed any directories for tools or resources,
you need to set them properly in config files for each reference genome.

    /path/to/pipeline/config.{b37,h19,h38}.ini

Running the pipeline
====================

You don't need to activate the conda environment for running the pipeline.  It will be taken care of by the pipeline.
All commands below should be running in the directory where you want to get results.

sample_list.txt file format
---------------------------

If you have fastq files,

    #sample_id    file_name                       location (full path)
    FVLT          FVLT_S15_L003_R1_001.fastq.gz   /path/to/FVLT_S15_L003_R1_001.fastq.gz
    FVLT          FVLT_S15_L003_R2_001.fastq.gz   /path/to/FVLT_S15_L003_R2_001.fastq.gz

If you have cram (or bam) files,

    #sample_id    file_name       location (full path)
    AN02255       AN02255.cram    /path/to/AN02255.cram

Align raw reads (fastq) to genome (b37 (default), hg19 or hg38)
---------------------------------------------------------------

Align fastq files to a reference genome to make a aligned cram, an ummapped bam and flagstats.

    python3 /path/to/pipeline/jobs/run_genome_mapping.py -q 4-day --sample-list /path/to/sample_list.txt 

    -q, --queue       specify the SGE queue for jobs to be submitted.
    -n, --conda-env   specify the name of conda environment (default: bp)
    -t, --target-seq  enable targeted sequencing mode to skip mark duplication.
    -f, --align-fmt   specify alignment format (cram|bam). Default is cram.
    -r, --reference   specify reference genome (b37|hg19|hg38). Default is b37 (GRCh37).
    --sample-list     specify sample_list.txt file
    -p, --run-gatk-hc once alignment complete, run the variant calling with the given ploidy.
    --run-filters     once variant calling complete, run the varinat filtering as well.

Run the GATK HaplotypeCaller
----------------------------

If you've already done aligning, you can run from the variant calling pipeline.
Given the BAM file, run the GATK HaplotypeCaller with ploidy 2, 12 and 50.

    python3 /path/to/pipeline/jobs/run_variant_calling.py -q 4-day -p 2 12 50 --sample-list /path/to/sample_list.txt 

    -p, --run-gatk-hc  specify ploidy options used by GATK.
    --run-filters      once variant calling complete, run the varinat filtering as well.

Variant filtering
-----------------

If you've already done aligning and calling variants, you can run from the variant filtering pipeline.
In such case, you need to specify a directory where your existing vcf files are using -v (--vcf-directory) option.
VCF and index file names should be formed as follows:
       <sample name>.ploidy_<ploidy>.vcf.gz
       <sample name>.ploidy_<ploidy>.vcf.gz.tbi

Given the BAM and VCF files, run the variant filtering.

    python3 /path/to/pipeline/jobs/run_variant_calling.py -q 4-day -p 50 --sample-list /path/to/sample_list.txt 

    --skip-cnvnator            skip the CNV filering
    -v, --vcf-directory        If you have VCF files elsewhere, specify the directory where VCF files are.
    -m, --multiple-alignments  enable multiple cram (or bam) files mode for combined calling

